#!/usr/bin/env bash
set -euo pipefail

# admin — Host-orchestrated lifecycle for devcontainer + services.
#
# Usage examples:
#   bash .devcontainer/bin/admin up start --interactive
#   bash .devcontainer/bin/admin down rebuild up start attach
#   bash .devcontainer/bin/admin up preflight start status
#
# Subcommands (run left→right):
#   up            Ensure devcontainer is running for this workspace
#   down          Stop the devcontainer (best-effort)
#   rebuild       Rebuild container via `devcontainer up --remove-existing-container`
#   preflight     Run in-container checks (dev-install --preflight)
#   start         Start services in container (idempotent)
#   stop          Stop services in container (best-effort)
#   status        Show host+container status (add --verbose for details)
#   attach        Attach interactive bash in container (use --tmux for tmux)
#   cf-deploy-sanitizer  Deploy the API sanitizer Worker (in container)
#   cf-deploy-font       Deploy the font/CSS Worker (in container)
#   cf-tail-sanitizer    Tail API sanitizer logs (in container)
#   cf-tail-font         Tail font Worker logs (in container)
#   cf                    Deploy both Workers (shorthand)
#   cf-tail               Tail logs for both Workers (shorthand)
#
# Flags (position-sensitive; place immediately after the subcommand they modify):
#   start --interactive    start detached then attach tmux (if available)
#   attach --tmux          attach tmux session instead of bash (if available)
#   rebuild --no-cache     pass --build-no-cache to the build
#   --workspace DIR        Override workspace folder for devcontainer CLI

log()  { printf '[admin] %s\n' "$*"; }
warn() { printf '[admin] WARNING: %s\n' "$*" >&2; }
fail() { printf '[admin] ERROR: %s\n' "$*" >&2; exit 1; }

# Resolve repo root/workspace
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
repo_root="$(cd "${script_dir}/../.." && pwd)"
WORKSPACE_DIR=${WORKSPACE_DIR:-${repo_root}}

# Guard: host-only entrypoint
if [ -f "/.dockerenv" ] || [ -n "${DEVCONTAINER:-}" ] || [ -d "/workspaces" ]; then
  fail "Run this on the HOST, not inside the devcontainer."
fi

ensure_devcontainer_cli() {
  command -v devcontainer >/dev/null 2>&1 || fail $'devcontainer CLI not found.\n  - Install via: bash .devcontainer/bin/host-install.sh\n  - Or see: https://github.com/devcontainers/cli'
}

run_in_container() {
  devcontainer exec --workspace-folder "${WORKSPACE_DIR}" bash -lc "$*"
}

is_container_running() {
  run_in_container "echo __OK__" >/dev/null 2>&1
}

has_devcontainer_down() {
  devcontainer --help 2>/dev/null | grep -qE '^\s*devcontainer down\b'
}

print_tmux_tips() {
  # Query tmux windows and print concise shortcuts
  local info
  if ! info=$(run_in_container "tmux list-windows -t viterbo-owner -F '#I:#W'" 2>/dev/null); then
    return 0
  fi
  echo ""
  echo "Tips: tmux controls inside container"
  echo "  - Attach: tmux attach -t viterbo-owner"
  echo "  - Switch: hold Ctrl+b then press window number"
  echo "  - Windows:"
  while IFS= read -r line; do
    [ -n "$line" ] || continue
    # format: 1:vibe
  echo "      $(printf '%s' "$line" | cut -d: -f1): $(printf '%s' "$line" | cut -d: -f2)"
  done <<<"$info"
  echo ""
}

cmd_up() {
  ensure_devcontainer_cli
  log "Ensuring devcontainer is up for: ${WORKSPACE_DIR}"
  devcontainer up --workspace-folder "${WORKSPACE_DIR}" >/dev/null
}

cmd_down() {
  ensure_devcontainer_cli
  if is_container_running; then
    log "Stopping in-container services (best-effort)"
    run_in_container ".devcontainer/bin/dev-stop.sh" || warn "dev-stop failed (continuing)."
    if has_devcontainer_down; then
      log "Stopping devcontainer"
      if ! devcontainer down --workspace-folder "${WORKSPACE_DIR}" >/dev/null 2>&1; then
        warn "'devcontainer down' failed; container may need manual stop."
      fi
    else
      warn "Your devcontainer CLI lacks 'down'. Skipping programmatic stop."
    fi
  else
    log "No running devcontainer detected; nothing to stop."
  fi
}

cmd_rebuild() {
  ensure_devcontainer_cli
  local no_cache_flag=${1:-0}
  if is_container_running; then
    log "Devcontainer is running; stopping services before rebuild."
    run_in_container ".devcontainer/bin/dev-stop.sh" || warn "dev-stop failed (continuing)."
  fi
  log "Rebuilding devcontainer (remove existing container)"
  if [ "$no_cache_flag" -eq 1 ]; then
    devcontainer up --workspace-folder "${WORKSPACE_DIR}" --remove-existing-container --build-no-cache
  else
    devcontainer up --workspace-folder "${WORKSPACE_DIR}" --remove-existing-container
  fi
}

cmd_preflight() {
  ensure_devcontainer_cli
  log "Running preflight checks inside container"
  if ! run_in_container "bash .devcontainer/bin/dev-install.sh --preflight"; then
    cat >&2 <<EOF
[admin] Preflight failed. Fix issues and re-run.
  - Cloudflared setup: bash .devcontainer/bin/owner-cloudflare-setup.sh
  - Host prerequisites: bash .devcontainer/bin/host-install.sh
EOF
    exit 1
  fi
}

cmd_start() {
  ensure_devcontainer_cli
  local interactive=${1:-0}
  if ! is_container_running; then
    fail $'Devcontainer is not running. Run: admin up'
  fi
  log "Starting services inside container (idempotent)"
  run_in_container "bash .devcontainer/bin/dev-start.sh --detached"
  # Optional: auto-deploy Cloudflare Workers after start when CF_AUTO_DEPLOY=1
  if [ "${CF_AUTO_DEPLOY:-0}" = "1" ]; then
    log "Auto-deploying Cloudflare Workers (CF_AUTO_DEPLOY=1)"
    run_in_container "cd .devcontainer/cloudflare && wrangler -c wrangler-sanitizer.toml deploy && wrangler -c wrangler.toml deploy" || \
      warn "Cloudflare auto-deploy reported issues (check wrangler auth/config)."
  fi
  if [ "$interactive" -eq 1 ]; then
    if run_in_container "command -v tmux >/dev/null"; then
      print_tmux_tips
      log "Attaching to tmux (detach with Ctrl+b d)"
      devcontainer exec --workspace-folder "${WORKSPACE_DIR}" bash -lc "tmux attach -t viterbo-owner" || true
    else
      warn "tmux not installed in container; falling back to interactive shell."
      exec devcontainer exec --workspace-folder "${WORKSPACE_DIR}" bash -l
    fi
  fi
}

cmd_stop() {
  ensure_devcontainer_cli
  if ! is_container_running; then
    log "Devcontainer not running; nothing to stop."
    return 0
  fi
  log "Stopping services inside container (best-effort)"
  run_in_container ".devcontainer/bin/dev-stop.sh" || warn "dev-stop reported issues."
}

cmd_status() {
  local verbose=${1:-0}
  # Host: tailscale summary
  if command -v tailscale >/dev/null 2>&1; then
    if tailscale status >/dev/null 2>&1; then
      echo "tailscale: connected"
    else
      echo "tailscale: installed (disconnected)"
    fi
  else
    echo "tailscale: not installed"
  fi

  # Devcontainer + in-container services
  if command -v devcontainer >/dev/null 2>&1; then
    if is_container_running; then
      echo "devcontainer: running"
      # Compose concise status inside container
      local inner='FRONTEND_PORT=${FRONTEND_PORT:-3000};\n'
      inner+=$'CF_TUNNEL=${CF_TUNNEL:-vibekanban};\n'
      inner+=$'is_run() { pgrep -fa "$1" >/dev/null 2>&1; };\n'
      inner+=$'vibe_run=0; if is_run "npx .*vibe-kanban" || pgrep -fa "(^|/)vibe-kanban( |$)" >/dev/null 2>&1; then vibe_run=1; fi;\n'
      inner+=$'vibe_work=0; if command -v curl >/dev/null 2>&1 && curl -fsS -m 1 -o /dev/null "http://127.0.0.1:${FRONTEND_PORT}/"; then vibe_work=1; fi;\n'
      inner+=$'code_run=0; if pgrep -fa "code .*tunnel" >/dev/null 2>&1; then code_run=1; fi;\n'
      inner+=$'cf_run=0; if pgrep -fa "cloudflared .*tunnel" >/dev/null 2>&1 || pgrep -fa "(^|/)cloudflared( |$)" >/dev/null 2>&1; then cf_run=1; fi;\n'
      inner+=$'cf_work=0; if command -v cloudflared >/dev/null 2>&1 && cloudflared tunnel info "${CF_TUNNEL}" >/dev/null 2>&1; then cf_work=1; fi;\n'
      inner+=$'printf "vibe-kanban: running=%s working=%s port=%s\n" "$vibe_run" "$vibe_work" "$FRONTEND_PORT";\n'
      inner+=$'printf "code-tunnel: running=%s\n" "$code_run";\n'
      inner+=$'printf "cloudflared: running=%s tunnel=%s working=%s\n" "$cf_run" "$CF_TUNNEL" "$cf_work";\n'
      if [ "$verbose" -eq 1 ]; then
        inner+=$'echo; echo "[verbose] tmux windows:"; { tmux list-windows -t viterbo-owner -F "#I:#W" 2>/dev/null || true; };\n'
        inner+=$'echo; echo "[verbose] ports:"; { ss -lntp 2>/dev/null | grep -E ":(${FRONTEND_PORT}|2222|3000)\\b" || true; };\n'
        inner+=$'echo; echo "[verbose] cloudflared info:"; { cloudflared tunnel info "${CF_TUNNEL}" 2>/dev/null || true; };\n'
      fi
      run_in_container "bash -lc $'${inner}'"

      # Cloudflare workers status (best-effort)
      local worker_inner='set -e; WRANGLER_DIR=.devcontainer/cloudflare;\n'
      worker_inner+=$'check_one() { local toml="$1"; local tag="$2"; local name="";\n'
      worker_inner+=$'  if [ -f "$toml" ]; then name=$(grep -E "^name\\s*=\\s*\"" "$toml" | head -n1 | sed -E "s/.*\"([^\"]+)\".*/\\1/"); fi;\n'
      worker_inner+=$'  if command -v wrangler >/dev/null 2>&1 && [ -n "$name" ]; then\n'
      worker_inner+=$'    out=$(cd "$WRANGLER_DIR" && wrangler deployments list --name "$name" --json 2>/dev/null || true);\n'
      worker_inner+=$'    if printf "%s" "$out" | grep -q "created_on"; then echo "cloudflare-worker(${tag}:${name}): deployed";\n'
      worker_inner+=$'    elif printf "%s" "$out" | grep -Eq "^\\s*\\[\\s*\\]\\s*$"; then echo "cloudflare-worker(${tag}:${name}): no deployments";\n'
      worker_inner+=$'    else echo "cloudflare-worker(${tag}:${name}): unknown (auth/config?)"; fi;\n'
      if [ "$verbose" -eq 1 ]; then
        worker_inner+=$'    echo; echo "[verbose] deployments(${tag}) raw:"; printf "%s\n" "$out";\n'
      fi
      worker_inner+=$'  else echo "cloudflare-worker(${tag}): wrangler or config missing"; fi; };\n'
      worker_inner+=$'check_one "$WRANGLER_DIR/wrangler.toml" font;\n'
      worker_inner+=$'check_one "$WRANGLER_DIR/wrangler-sanitizer.toml" sanitizer;\n'
      run_in_container "bash -lc $'${worker_inner}'"
    else
      echo "devcontainer: not running"
    fi
  else
    echo "devcontainer: CLI not installed"
  fi

  # Host verbose extras
  if [ "$verbose" -eq 1 ]; then
    echo
    echo "[verbose] host processes:"; for p in 'code .*tunnel' 'cloudflared' 'vibe-kanban' 'npx .*vibe-kanban' 'devcontainer'; do pgrep -fa "$p" || true; done
    echo
    echo "[verbose] cloudflared config dirs:"; for d in "$HOME/.cloudflared" "/srv/devhome/.cloudflared"; do [ -d "$d" ] && { echo "-- $d"; ls -la "$d" || true; }; done
    echo
    if command -v ss >/dev/null 2>&1; then ss -lntp 2>/dev/null || true; elif command -v netstat >/dev/null 2>&1; then netstat -lntp 2>/dev/null || true; fi
  fi
}

cmd_attach() {
  ensure_devcontainer_cli
  local interactive=${1:-0}
  if ! is_container_running; then
    fail $'No running devcontainer detected for this workspace.\n  - Start it first: bash .devcontainer/bin/admin up'
  fi
  if [ "$interactive" -eq 1 ] && run_in_container "command -v tmux >/dev/null && tmux has-session -t viterbo-owner 2>/dev/null"; then
    print_tmux_tips
    exec devcontainer exec --workspace-folder "${WORKSPACE_DIR}" bash -lc "tmux attach -t viterbo-owner"
  else
    exec devcontainer exec --workspace-folder "${WORKSPACE_DIR}" bash -l
  fi
}

print_usage() {
  cat <<'EOF'
admin — host orchestrator for devcontainer + services

Commands (execute left→right):
  up            Ensure devcontainer is running
  down          Stop the devcontainer (best-effort)
  rebuild       Rebuild container (removes and recreates)
  preflight     Run in-container checks
  start         Start services inside container (idempotent)
  stop          Stop services inside container (best-effort)
  status        Show host+container status (add --verbose for details)
  attach        Attach interactive bash (use --tmux for tmux)
  cf-deploy-sanitizer  Deploy API sanitizer Worker
  cf-deploy-font       Deploy font/CSS Worker
  cf-tail-sanitizer    Tail API sanitizer logs
  cf-tail-font         Tail font logs

Flags (place immediately after a subcommand):
  start --interactive    attach tmux after boot
  attach --tmux          attach tmux session
  rebuild --no-cache     build without cache
  --workspace DIR        devcontainer workspace folder override

Examples:
  bash .devcontainer/bin/admin up start --interactive
  bash .devcontainer/bin/admin down rebuild up start attach
  bash .devcontainer/bin/admin up preflight start status
EOF
}

# Parse argv as a pipeline of commands. Some flags modify the subcommand that
# immediately precedes them (place flags right after the command).
if [ $# -eq 0 ]; then
  print_usage; exit 0
fi

last_cmd=""
while [ $# -gt 0 ]; do
  case "$1" in
    up)
      cmd_up
      last_cmd="up"
      ;;
    down)
      cmd_down
      last_cmd="down"
      ;;
    rebuild)
      no_cache=0
      if [ "${2-}" = "--no-cache" ]; then no_cache=1; shift; fi
      cmd_rebuild "$no_cache"
      last_cmd="rebuild"
      ;;
    preflight)
      cmd_preflight
      last_cmd="preflight"
      ;;
    start)
      interactive=0
      if [ "${2-}" = "--interactive" ]; then interactive=1; shift; fi
      cmd_start "$interactive"
      last_cmd="start"
      ;;
    stop)
      cmd_stop
      last_cmd="stop"
      ;;
    status)
      verbose=0
      if [ "${2-}" = "--verbose" ]; then verbose=1; shift; fi
      cmd_status "$verbose"
      last_cmd="status"
      ;;
    cf)
      run_in_container "cd .devcontainer/cloudflare && wrangler -c wrangler-sanitizer.toml deploy && wrangler -c wrangler.toml deploy"
      last_cmd="cf"
      ;;
    cf-deploy-sanitizer)
      run_in_container "cd .devcontainer/cloudflare && wrangler -c wrangler-sanitizer.toml deploy"
      last_cmd="cf-deploy-sanitizer"
      ;;
    cf-deploy-font)
      run_in_container "cd .devcontainer/cloudflare && wrangler -c wrangler.toml deploy"
      last_cmd="cf-deploy-font"
      ;;
    cf-tail)
      # Tail both in parallel when possible; fall back to sequential.
      if run_in_container "command -v tmux >/dev/null"; then
        run_in_container "\
          tmux new-session -d -s cf-tail -n sanitizer \"cd .devcontainer/cloudflare && wrangler -c wrangler-sanitizer.toml tail\"; \
          tmux new-window -t cf-tail -n font \"cd .devcontainer/cloudflare && wrangler -c wrangler.toml tail\"; \
          tmux attach -t cf-tail"
      else
        run_in_container "bash -lc \"cd .devcontainer/cloudflare && wrangler -c wrangler-sanitizer.toml tail & wrangler -c wrangler.toml tail & wait\""
      fi
      ;;
    cf-tail-sanitizer)
      run_in_container "cd .devcontainer/cloudflare && wrangler -c wrangler-sanitizer.toml tail"
      last_cmd="cf-tail-sanitizer"
      ;;
    cf-tail-font)
      run_in_container "cd .devcontainer/cloudflare && wrangler -c wrangler.toml tail"
      last_cmd="cf-tail-font"
      ;;
    attach)
      use_tmux=0
      if [ "${2-}" = "--tmux" ] || [ "${2-}" = "--interactive" ]; then use_tmux=1; shift; fi
      cmd_attach "$use_tmux"  # exec replaces process
      ;;
    --interactive)
      # If provided after 'start', interpret as request to attach now
      if [ "$last_cmd" = "start" ]; then
        if run_in_container "command -v tmux >/dev/null"; then
          print_tmux_tips
          log "Attaching to tmux (detach with Ctrl+b d)"
          devcontainer exec --workspace-folder "${WORKSPACE_DIR}" bash -lc "tmux attach -t viterbo-owner" || true
        else
          warn "tmux not installed in container; ignoring --interactive."
        fi
      else
        warn "--interactive should follow 'start' or 'attach'; ignoring."
      fi
      ;;
    --no-cache)
      warn "--no-cache should follow 'rebuild'; ignoring."
      ;;
    --workspace)
      shift
      [ $# -gt 0 ] || fail "--workspace requires a path"
      WORKSPACE_DIR="$1"
      ;;
    -h|--help)
      print_usage; exit 0
      ;;
    *)
      fail "Unknown token: $1"
      ;;
  esac
  shift || true
done

exit 0
