#!/usr/bin/env bash
set -euo pipefail

# host-admin — Host-side orchestrator for devcontainer + in-container services.
#
# Commands (execute left→right):
#   up                      Ensure devcontainer is running for this workspace
#   down                    Stop services in container (best-effort) and stop container
#   rebuild [--no-cache]    Rebuild devcontainer (remove existing container)
#   install                 Run in-container tooling install
#   preflight               Run in-container checks
#   start [--interactive]   Start services inside container (idempotent)
#   restart                 Restart only VibeKanban inside container
#   stop                    Stop services inside container (best-effort)
#   status [--verbose]      Show host+container status
#   attach [--tmux]         Attach interactive shell/tmux in container
#   cf / cf-*               Cloudflare Workers deploy/tail (in container)
#   host-setup              Prepare host (devcontainer CLI + bind-mount roots)
#
# Global flags:
#   --workspace DIR         Override workspace folder for devcontainer CLI

log()  { printf '[host-admin] %s\n' "$*"; }
warn() { printf '[host-admin] WARNING: %s\n' "$*" >&2; }
fail() { printf '[host-admin] ERROR: %s\n' "$*" >&2; exit 1; }

# Guard: host-only entrypoint
if [ -f "/.dockerenv" ] || [ -n "${DEVCONTAINER:-}" ] || [ -d "/workspaces" ]; then
  fail "Run this on the HOST, not inside the devcontainer."
fi

# Resolve repo root/workspace
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
repo_root="$(cd "${script_dir}/../.." && pwd)"
WORKSPACE_DIR=${WORKSPACE_DIR:-${repo_root}}

ensure_devcontainer_cli() {
  command -v devcontainer >/dev/null 2>&1 || fail $'devcontainer CLI not found.\n  - Install via: bash .devcontainer/bin/host-admin host-setup\n  - Or see: https://github.com/devcontainers/cli'
}

run_in_container() {
  devcontainer exec --workspace-folder "${WORKSPACE_DIR}" bash -lc "$*"
}

is_container_running() {
  run_in_container "echo __OK__" >/dev/null 2>&1
}

has_devcontainer_down() {
  devcontainer --help 2>/dev/null | grep -qE '^\s*devcontainer down\b'
}

print_tmux_tips() {
  local info
  if ! info=$(run_in_container "tmux list-windows -t viterbo-owner -F '#I:#W'" 2>/dev/null); then
    return 0
  fi
  echo
  echo "Tips: tmux controls inside container"
  echo "  - Attach: tmux attach -t viterbo-owner"
  echo "  - Switch: hold Ctrl+b then press window number"
  echo "  - Windows:"
  while IFS= read -r line; do
    [ -n "$line" ] || continue
    echo "      $(printf '%s' "$line" | cut -d: -f1): $(printf '%s' "$line" | cut -d: -f2)"
  done <<<"$info"
  echo
}

cmd_up() {
  ensure_devcontainer_cli
  log "Ensuring devcontainer is up for: ${WORKSPACE_DIR}"
  devcontainer up --workspace-folder "${WORKSPACE_DIR}" >/dev/null
}

cmd_down() {
  ensure_devcontainer_cli
  if is_container_running; then
    log "Stopping in-container services (best-effort)"
    run_in_container "bash .devcontainer/bin/container-admin stop" || warn "stop failed (continuing)."
    if has_devcontainer_down; then
      log "Stopping devcontainer"
      if ! devcontainer down --workspace-folder "${WORKSPACE_DIR}" >/dev/null 2>&1; then
        warn "'devcontainer down' failed; container may need manual stop."
      fi
    else
      warn "Your devcontainer CLI lacks 'down'. Skipping programmatic stop."
    fi
  else
    log "No running devcontainer detected; nothing to stop."
  fi
}

cmd_rebuild() {
  ensure_devcontainer_cli
  local no_cache_flag=${1:-0}
  if is_container_running; then
    log "Devcontainer is running; stopping services before rebuild."
    run_in_container "bash .devcontainer/bin/container-admin stop" || warn "stop failed (continuing)."
  fi
  log "Rebuilding devcontainer (remove existing container)"
  if [ "$no_cache_flag" -eq 1 ]; then
    devcontainer up --workspace-folder "${WORKSPACE_DIR}" --remove-existing-container --build-no-cache
  else
    devcontainer up --workspace-folder "${WORKSPACE_DIR}" --remove-existing-container
  fi
}

cmd_install()  { ensure_devcontainer_cli; run_in_container "bash .devcontainer/bin/container-admin install"; }
cmd_preflight(){ ensure_devcontainer_cli; run_in_container "bash .devcontainer/bin/container-admin preflight"; }

cmd_start() {
  ensure_devcontainer_cli
  local interactive=${1:-0}
  if ! is_container_running; then
    fail $'Devcontainer is not running. Run: host-admin up'
  fi
  log "Starting services inside container (idempotent)"
  if [ "$interactive" -eq 1 ]; then
    print_tmux_tips || true
    exec devcontainer exec --workspace-folder "${WORKSPACE_DIR}" bash -lc "bash .devcontainer/bin/container-admin start --interactive"
  else
    run_in_container "bash .devcontainer/bin/container-admin start --detached"
  fi
}

cmd_restart() {
  ensure_devcontainer_cli
  if ! is_container_running; then
    fail $'Devcontainer is not running. Run: host-admin up'
  fi
  log "Restarting VibeKanban inside container (hot fix)"
  run_in_container "bash .devcontainer/bin/container-admin restart" || warn "restart reported issues."
}

cmd_stop() {
  ensure_devcontainer_cli
  if ! is_container_running; then
    log "Devcontainer not running; nothing to stop."
    return 0
  fi
  log "Stopping services inside container (best-effort)"
  run_in_container "bash .devcontainer/bin/container-admin stop" || warn "stop reported issues."
}

cmd_status() {
  local verbose=${1:-0}

  # Host: tailscale summary (best-effort)
  if command -v tailscale >/dev/null 2>&1; then
    if tailscale status >/dev/null 2>&1; then
      echo "tailscale: connected"
    else
      echo "tailscale: installed (disconnected)"
    fi
  else
    echo "tailscale: not installed"
  fi

  # Devcontainer + in-container services
  if command -v devcontainer >/dev/null 2>&1; then
    if is_container_running; then
      echo "devcontainer: running"
      run_in_container "bash .devcontainer/bin/container-admin status ${verbose:+--verbose}"
    else
      echo "devcontainer: not running"
    fi
  else
    echo "devcontainer: CLI not installed"
  fi

  # Host verbose extras
  if [ "$verbose" -eq 1 ]; then
    echo
    echo "[verbose] host processes:"; for p in 'code .*tunnel' 'cloudflared' 'vibe-kanban' 'npx .*vibe-kanban' 'devcontainer'; do pgrep -fa "$p" || true; done
    echo
    echo "[verbose] cloudflared config dirs:"; for d in "$HOME/.cloudflared" "/srv/devhome/.cloudflared"; do [ -d "$d" ] && { echo "-- $d"; ls -la "$d" || true; }; done
    echo
    if command -v ss >/dev/null 2>&1; then ss -lntp 2>/dev/null || true; elif command -v netstat >/dev/null 2>&1; then netstat -lntp 2>/dev/null || true; fi
  fi
}

cmd_attach() {
  ensure_devcontainer_cli
  local interactive=${1:-0}
  if ! is_container_running; then
    fail $'No running devcontainer detected for this workspace.\n  - Start it first: bash .devcontainer/bin/host-admin up'
  fi
  if [ "$interactive" -eq 1 ]; then
    print_tmux_tips || true
    exec devcontainer exec --workspace-folder "${WORKSPACE_DIR}" bash -lc "bash .devcontainer/bin/container-admin attach --tmux"
  else
    exec devcontainer exec --workspace-folder "${WORKSPACE_DIR}" bash -l
  fi
}

cmd_cf()                 { ensure_devcontainer_cli; run_in_container "bash .devcontainer/bin/container-admin cf"; }
cmd_cf_deploy_sanitizer(){ ensure_devcontainer_cli; run_in_container "bash .devcontainer/bin/container-admin cf-deploy-sanitizer"; }
cmd_cf_deploy_font()     { ensure_devcontainer_cli; run_in_container "bash .devcontainer/bin/container-admin cf-deploy-font"; }
cmd_cf_tail()            { ensure_devcontainer_cli; exec devcontainer exec --workspace-folder "${WORKSPACE_DIR}" bash -lc "bash .devcontainer/bin/container-admin cf-tail"; }
cmd_cf_tail_sanitizer()  { ensure_devcontainer_cli; exec devcontainer exec --workspace-folder "${WORKSPACE_DIR}" bash -lc "bash .devcontainer/bin/container-admin cf-tail-sanitizer"; }
cmd_cf_tail_font()       { ensure_devcontainer_cli; exec devcontainer exec --workspace-folder "${WORKSPACE_DIR}" bash -lc "bash .devcontainer/bin/container-admin cf-tail-font"; }

cmd_host_setup() {
  # Install devcontainer CLI via npm if available; ensure host bind mounts exist
  if command -v devcontainer >/dev/null 2>&1; then
    log "devcontainer CLI already installed ($(devcontainer --version 2>/dev/null || echo unknown))."
  else
    if command -v npm >/dev/null 2>&1; then
      log "Installing devcontainer CLI via npm (@devcontainers/cli)"
      npm i -g @devcontainers/cli || fail "npm install failed"
      devcontainer --version || true
    else
      fail "npm not found; install Node.js/npm or follow https://github.com/devcontainers/cli"
    fi
  fi

  local dirs=(
    /srv/devhome/.config/gh
    /srv/devhome/.config/.wrangler
    /srv/devhome/.vscode
    /srv/devhome/.config/codex
    /srv/devhome/.cloudflared
    /srv/devhome/.cache/uv
    /srv/devhome/.local/share/ai/bloop/vibe-kanban
    /srv/devworktrees/vibe-kanban/worktrees
  )
  log "Ensuring host bind-mount roots exist (sudo may prompt)..."
  sudo mkdir -p "${dirs[@]}"
  local owner="${SUDO_USER:-${USER}}"
  sudo chown -R "$owner:$owner" /srv/devhome /srv/devworktrees
  log "Host directories ready under /srv/devhome and /srv/devworktrees."
}

print_usage() {
  cat <<'EOF'
host-admin — host orchestrator for devcontainer + services

Commands (execute left→right):
  up                      Ensure devcontainer is running
  down                    Stop services then stop container
  rebuild [--no-cache]    Rebuild container (removes and recreates)
  install                 In-container tooling install
  preflight               In-container checks
  start [--interactive]   Start services inside container
  restart                 Restart only VibeKanban inside container
  stop                    Stop services inside container
  status [--verbose]      Show host+container status
  attach [--tmux]         Attach to container (tmux or shell)
  cf                      Deploy both Cloudflare Workers
  cf-deploy-sanitizer     Deploy sanitizer Worker
  cf-deploy-font          Deploy font Worker
  cf-tail                 Tail logs for both Workers
  cf-tail-sanitizer       Tail sanitizer logs
  cf-tail-font            Tail font logs
  host-setup              Install devcontainer CLI + prepare bind-mount dirs

Flags:
  --workspace DIR         devcontainer workspace folder override

Examples:
  bash .devcontainer/bin/host-admin up start --interactive
  bash .devcontainer/bin/host-admin down rebuild up start attach
  bash .devcontainer/bin/host-admin up preflight start status
EOF
}

# Parse argv as a pipeline of commands. Some flags modify the following command.
if [ $# -eq 0 ]; then
  print_usage; exit 0
fi

last_cmd=""
while [ $# -gt 0 ]; do
  case "$1" in
    up)         cmd_up; last_cmd=up ;;
    down)       cmd_down; last_cmd=down ;;
    rebuild)
      no_cache=0
      if [ "${2-}" = "--no-cache" ]; then no_cache=1; shift; fi
      cmd_rebuild "$no_cache"; last_cmd=rebuild ;;
    install)    cmd_install; last_cmd=install ;;
    preflight)  cmd_preflight; last_cmd=preflight ;;
    start)
      interactive=0
      if [ "${2-}" = "--interactive" ]; then interactive=1; shift; fi
      cmd_start "$interactive"; last_cmd=start ;;
    restart)   cmd_restart; last_cmd=restart ;;
    stop)       cmd_stop; last_cmd=stop ;;
    status)
      verbose=0
      if [ "${2-}" = "--verbose" ]; then verbose=1; shift; fi
      cmd_status "$verbose"; last_cmd=status ;;
    attach)
      use_tmux=0
      if [ "${2-}" = "--tmux" ] || [ "${2-}" = "--interactive" ]; then use_tmux=1; shift; fi
      cmd_attach "$use_tmux" ;;
    cf)                 cmd_cf; last_cmd=cf ;;
    cf-deploy-sanitizer) cmd_cf_deploy_sanitizer; last_cmd=cf-deploy-sanitizer ;;
    cf-deploy-font)      cmd_cf_deploy_font;      last_cmd=cf-deploy-font ;;
    cf-tail)             cmd_cf_tail;             last_cmd=cf-tail ;;
    cf-tail-sanitizer)   cmd_cf_tail_sanitizer;   last_cmd=cf-tail-sanitizer ;;
    cf-tail-font)        cmd_cf_tail_font;        last_cmd=cf-tail-font ;;
    host-setup)          cmd_host_setup;          last_cmd=host-setup ;;
    --workspace)
      shift; [ $# -gt 0 ] || fail "--workspace requires a path"; WORKSPACE_DIR="$1" ;;
    --no-cache)
      warn "--no-cache should follow 'rebuild'; ignoring." ;;
    --interactive)
      if [ "$last_cmd" = "start" ]; then
        print_tmux_tips
        exec devcontainer exec --workspace-folder "${WORKSPACE_DIR}" bash -lc "bash .devcontainer/bin/container-admin start --interactive"
      else
        warn "--interactive should follow 'start' or 'attach'; ignoring."
      fi
      ;;
    -h|--help) print_usage; exit 0 ;;
    *) fail "Unknown token: $1" ;;
  esac
  shift || true
done

exit 0
